model User {
  id                Int             @id @default(autoincrement())
  enabled           Boolean?        @default(true)
  slug              String?         @db.VarChar(250)  @unique
  firstName         String          @db.VarChar(250)  @map("first_name")
  lastName          String          @db.VarChar(250)  @map("last_name")
  email             String          @db.VarChar(250)  @unique
  emailVerifiedAt   DateTime?       @default(now())   @map("email_verified_at")
  password          String          @db.VarChar(250)
  description       String?         @db.VarChar(250)
  image             String?         @db.VarChar(250)
  rememberToken     String?         @db.VarChar(250)  @map("remember_token")

  createdAt         DateTime        @default(now())   @map("created_at")
  updatedAt         DateTime        @default(now())   @map("updated_at")

  candidates        UsersCandidates[]
  cvs               UsersCvs[]

  @@map("users")
}

enum Action {
  CREATE
  UPDATE
}

model UsersCandidates {
  id                Int             @default(autoincrement()) @unique
  user              User            @relation(fields: [userId], references: [id])
  userId            Int             @map("user_id") // relation scalar field (used in the `@relation` attribute above)
  candidate         Candidate       @relation(fields: [candidateId], references: [id])
  candidateId       Int             @map("candidate_id") // relation scalar field (used in the `@relation` attribute above)

  action            Action          @default(UPDATE)
  updatedFields     String?         @map("updated_fields")

  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @default(now()) @map("updated_at")

  @@id([userId, candidateId])

  @@map("users_on_candidates")
}

model UsersCvs {
  id                Int             @default(autoincrement()) @unique
  user              User            @relation(fields: [userId], references: [id])
  userId            Int             @map("user_id")
  cv                Cv              @relation(fields: [cvId], references: [id])
  cvId              Int             @map("cv_id")

  action            Action          @default(UPDATE)
  updatedFields     String?         @map("updated_fields")

  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @default(now()) @map("updated_at")

  @@id([userId, cvId])

  @@map("users_on_cvs")
}